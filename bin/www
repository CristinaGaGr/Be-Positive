#!/usr/bin/env node
var express = require("express");
const http = require('http');
let app = require('../app');
const Chat = require('../models/chat');
const User = require('../models/user');
var rooms = ["General"];
User.find({}).then((respuesta) => {
  respuesta.forEach(x => {
    rooms.push(String(respuesta._id))

  });
})
// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);
const io = require('socket.io').listen(server);


server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

// chat.find({})
//   .then(response => {
//     response.forEach(element => {

//       rooms.push(element._id)
//     });
//   })

//usernames which are currently connected to the chat
var usernames = {};
// rooms which are currently available in chat

io.sockets.on('connection', function (socket) {

  // when the client emits 'adduser', this listens and executes
  socket.on('adduser', function (id) {
    User.findById(id).then((resp) => {
      let username = resp.username;
      // store the username in the socket session for this client
      socket.username = username;
      // store the room name in the socket session for this client
      socket.room = 'General';
      // add the client's username to the global list
      usernames[username] = username;
      resp.chat.forEach(element => {
        if (rooms.indexOf(element.chatId) === -1) {
          rooms.push(element.chatId)
        }
      });

      // send client to room 1
      //socket.join('General');
      // echo to client they've connected
      //socket.emit('updatechat', 'SERVER', 'you have connected to General');
      // echo to room 1 that a person has connected to their room
      //socket.broadcast.to('General').emit('updatechat', 'SERVER', username + ' has connected to this room');
      socket.emit('updaterooms', rooms, 'General');
    })

  });

  // when the client emits 'sendchat', this listens and executes
  socket.on('sendchat', function (data) {
    //console.log(socket.room, socket.username, data[0])
    let urlimages = "/images/profileimages/";
    User.findOne({ username: socket.username }).then((resp) => {
      Chat.create({ chatId: socket.room, usernamechat: socket.username, message: data[0], userId: resp._id });
      // we tell the client to execute 'updatechat' with 2 parameters
      io.sockets.in(socket.room).emit('updatechat', socket.username, data[0], data[1], resp.username);
      User.find({ _id: { $nin: resp._id }, "chat.chatId": String(socket.room) })
        .then((respuesta) => {
          console.log(String(socket.room))
          console.log(respuesta)
          io.sockets.emit(String(respuesta[0]._id), String(socket.username + ": " + data[0]));

        })
    })
    // 



  });

  socket.on("readmessages", function (data) {
    Chat.find({ chatId: data[0] }).populate('userId')
      .then((x) => {
        // socket.broadcast.to(newroom).emit('updatechat', socket.username, data)
        io.sockets.emit(data[1], x)

      })
  })


  socket.on('switchRoom', function async(array) {
    let newroom = array[0];
    let name = array[1];
    // leave the current room (stored in session)
    socket.leave(socket.room);
    // join new room, received as function parameter
    socket.join(newroom);
    //  socket.emit('updatechat', 'SERVER', 'you have connected to ' + name);
    // sent message to OLD room
    //socket.broadcast.to(socket.room).emit('updatechat', 'SERVER', socket.username + ' has left this room');
    // update socket session room title
    socket.room = newroom;
    // socket.broadcast.to(newroom).emit('updatechat', 'SERVER', socket.username + ' has joined this room');
    Chat.find({ chatId: newroom })
      .then((x) => {
        x.forEach((y) => {
          //io.sockets.in(y.chatId).emit('updatechat', y.usernamechat, y.message)
          //console.log("updatechat messages-->", y.chatId, y.usernamechat, y.message)
        })
        // socket.broadcast.to(newroom).emit('updatechat', socket.username, data)
      });

    socket.emit('updaterooms', rooms, newroom);
  });

  // when the user disconnects.. perform this
  socket.on('disconnect', function () {
    // remove the username from global usernames list
    rooms.splice(rooms.indexOf(socket.username), 1);
    delete usernames[socket.username];
    // update list of users in chat, client-side
    io.sockets.emit('updateusers', usernames);
    // echo globally that this client has left
    // socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
    socket.leave(socket.room);
  });


});








server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

